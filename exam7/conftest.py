# //////////////////////////////////////////////////////////////////////////
"""
    Фикстуры могут быть параметризованы, если их нужно вызывать неоднократно, выполняя несколько одинаковых,
использующих эти фикстуры, тестов. Обычно повторно запускаемые тестовые функции не зависят друг от друга.
И в этом случае параметризация фикстур помогает писать исчерпывающие функциональные тесты для компонентов,
которые сами по себе могут быть сконфигурированы разными способами.
"""

import pytest
import smtplib


@pytest.fixture(scope="module", params=["smtp.gmail.com", "mail.python.org"])
def smtp_connection(request):
    smtp_connection = smtplib.SMTP(request.param, 587, timeout=5)
    yield smtp_connection
    print("finalizing {}".format(smtp_connection))
    smtp_connection.close()

#////////////////////////////////////////////////////////////////////////////////////////
"""
        Числа, строки, логические значения и значение None имеют свои строковые представления, 
    которые используются в ID теста. Для остальных объектов pytest создает строку, 
    основываясь на имени аргумента. С помощью ключевого слова ids можно самостоятельно 
    определить строку, которая будет использоваться в ID теста для определенного значения фикстуры/
        Пример выше показывает, что ids можно определять как списком строк, так и функцией, 
    которая будет вызвана со значением фикстуры и вернет строку. В последнем случае, 
    если функция вернет None, то pytest сгенерирует ID автоматически/
"""
@pytest.fixture(params=[0, 1], ids=['spam', 'ham'])
def a(request):
    return request.param

def idfn(fixture_value):
    if fixture_value == 0:
        return 'eggs'
    else:
        return None

@pytest.fixture(params=[0, 1], ids=idfn)
def b(request):
    return request.param

